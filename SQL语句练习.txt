在原来的文件增加内容：
git add SQL语句练习.txt
git commit -m'SQL必知必会'
git remote add origin//不要这一步
git push origin master


1、查询平均成绩大于60分的同学的学号和平均成绩
SELECT Sid,AVG(score) FROM sc GROUP BY Sid HAVING AVG(score)>60;
SELECT Sid AS 学号,AVG(score) AS 平均分数 FROM sc GROUP BY Sid HAVING AVG(score)>60;
2、查询所有同学的学号、姓名、选课数、总成绩
SELECT student.Sid,student.Sname,COUNT(sc.Cid),SUM(sc.score) 
FROM student LEFT JOIN sc ON student.Sid = sc.Sid GROUP BY student.Sid;
3、查询姓“李”的老师的个数
 SELECT Tname,Tid, COUNT(teacher.Tid) FROM teacher WHERE Tname LIKE'李%' GROUP BY Tid;
 // 使用聚合函数一般都要搭配GROUP BY进行分组
 4、检索多个列
 SELECT prod_id, prod_name, prod_price FROM products;
 5、检索products表中所有产品供应商的ID
 SELECT DISTINCT vend_id, FROM products;//返回不同的值，最好是针对一列
 6、检索前五行
 SELECT TOP 5 prod_name FROM Products;（SQL server-TOP）
 SELECT prod_name FROM Products LIMIT 5;（mysql）
 SELECT prod_name FROM Products WHERE ROWNUM <=5;（Oracle）
 7、检索后面的5行
 SELECT prod_name FROM Products LIMIT 5 OFFSET 5;
 //第一个数字是指从哪儿开始，第二个数字是检索的行数
 8、使用注释
 行内注释：--(ctrl+/)
 #
 多行注释：/*  */
 9、SQL语句执行顺序
 SELECT <DISTINCT去重> [列名....],sum[列名]
 <聚合函数配合GROUP BY>
 FROM [表名1] AS <别名1>
 JOIN [表名2] AS <别名2>
 ON 表名1.ID = 表名2.ID
 WHERE <条件>
 GROUP BY <分组>
 HAVING <对分组过滤>
 ORDER BY [列名1],[列名2]...,<排序>--最后显示DESC降序
 LIMIT <从哪行开始+1> OFFSET <限制显示几行>
 10、排序
 多列：SELECT prod_name,prod_price FROM products ORDER BY prod_price DESC,prod_name;
 按位置排序：SELECT prod_id,prod_price,prod_name FROM products ORDER BY 2 DESC,3;
 11、只返回prod_price值为3.49的行
 SELECT * FROM products WHERE prod_price (=,<,>,!=,<>) 3.49;
 SELECT * FROM products WHERE vend_id != 'DLL01';//字符串加引号
 12、范围：BETWEEN.... AND
 SELECT * FROM products WHERE prod_price BETWEEN 5 AND 9;
 12、空值检查
 返回没有标价格的产品（不是0二十NULL）
 SELECT * FROM products WHERE prod_price IS NULL;
 邮箱没写的
 SELECT * FROM customers WHERE cust_email IS NULL;
 13、对多个列进行刷选
 供应商DLL01制造且价格小于等于4美元的所有产品的名称和价格
 SELECT prod_id,prod_price,prod_name,vend_id FROM products 
 WHERE prod_price <= 4 AND vend_id = 'DLL01';
14、需要列出价格为10美元及以上，且由DLL01或BRS01制造的所有产品
SELECT prod_id,prod_price,prod_name,vend_id FROM products 
WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') AND prod_price > 10;
//AND优先级大于OR，所以要加括号
15、供应商DLL01和BRS01制造的所有产品
WHERE子句中用来指定要匹配值的清单的关键字，功能IN和OR一样（IN的性能好）
SELECT * FROM products WHERE vend_id IN('DLL01','BRS01');
SELECT * FROM Products WHERE vend_id = 'DLL01' OR vend_id = 'BRS01'
16、列出除DLL01之外的所有供应商制造的产品
SELECT prod_name FROM Products WHERE NOT vend_id = 'DLL01' ORDER BY prod_name;
17、通配符%-0,1，多个
找出所有包含bean bag的产品
SELECT prod_id, prod_name FROM Products WHERE prod_name LIKE '%bean bag%'; 
18、下户线_单个字符
SELECT * from products WHERE prod_name LIKE"__ inch teddy bear"
//匹配到二个数字，三个和一个都匹配不到
19、[]指定字符集-只有微软的Access和SQL Server支持集合
使用通配符性能下降，尽量不要放在开头；
20、计算
订单号20008中的所有物品的汇总价格
SELECT order_num,prod_id,quantity,item_price,quantity*item_price AS num_price 
FROM orderitems WHERE order_num='20008';
21、聚合函数
AVG()返回某列的平均值
COUNT()返回某列的行数
MAX()返回某列的最大值
MIN()返回某列的最小值
SUM()返回某列值之和
22、返回商品DLL01为的平均值
SELECT  AVG(prod_price) AS avg_price FROM products WHERE vend_id = 'DLL01'

使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。
使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。
对具有电子邮件地址的客户计数
SELECT COUNT(cust_email) AS num_cust FROM customers
23、返回订单号为20005的商品总数
SELECT SUM(quantity) AS number FROM orderitems WHERE order_num = '20005'
合计每项物品的item_price*quantity，得出总的订单金额
SELECT SUM(item_price*quantity) AS total_price FROM OrderItems
WHERE order_num = 20005;
24、求价格的最大，最小。。
SELECT COUNT(*) AS num_items,MAX(prod_price) AS max_price,MIN(prod_price) AS min_price,
AVG(prod_price) AS avg_price FROM products;
25、分组
返回每个供应商提供的产品数目
SELECT vend_id,COUNT(*) AS num_prods FROM products GROUP BY vend_id;
26、过滤分组having
SELECT vend_id,COUNT(*) AS num_prods FROM products GROUP BY vend_id HAVING COUNT(*)>2
27、列出具有两个以上产品且其价格大于等于4的供应商
SELECT vend_id,prod_price,COUNT(*) AS num_prods FROM products WHERE prod_price>=4
GROUP BY vend_id HAVING COUNT(*)>=2;
//WHERE子句过滤所有prod_price至少为4的行，然后按vend_id分组数据，HAVING子句过滤计数为2或2以上的分组
28、包含三个或更多物品的订单号和订购物品的数目，按照数量排序
SELECT order_num ,COUNT(*) AS iterms FROM orderitems
GROUP BY order_num HAVING COUNT(*)>=3 ORDER BY iterms;
29、列出订购物品RGAN01的所有顾客
SELECT cust_name,cust_contact FROM customers WHERE cust_id IN
(SELECT cust_id FROM orders WHERE order_num 
IN( SELECT order_num FROM orderitems WHERE prod_id = 'RGAN01'));
连接查询：
SELECT cust_name,cust_contact FROM customers,orders,orderitems 
WHERE customers.cust_id = orders.cust_id
AND orders.order_num = orderitems.order_num
AND prod_id = 'RGAN01';
30、显示Customers表中每个顾客的订单总数
SELECT cust_name,cust_state,
(SELECT COUNT(*) FROM orders
WHERE orders.cust_id = customers.cust_id)
AS oders FROM customers;
31、联结：查出二个表中的数据-
where等值联结
SELECT vend_name,prod_name,prod_price 
FROM vendors,products WHERE vendors.vend_id = products.vend_id;
内联结join  in
SELECT vend_name,prod_name,prod_price 
FROM vendors JOIN products ON vendors.vend_id = products.vend_id;
32、显示订单20007中的物品
SELECT prod_name, vend_name, prod_price, quantity
FROM OrderItems, Products, Vendors
WHERE Products.vend_id = Vendors.vend_id
AND OrderItems.prod_id = Products.prod_id AND order_num = 20007;
33、自联结查询
给与Jim Jones同一公司的所有顾客发送一封信件。
这个查询要求首先找出Jim Jones工作的公司，然后找出在该公司工作的顾客
SELECT cust_id,cust_name,cust_contact FROM customers WHERE cust_name = (
SELECT cust_name FROM customers WHERE cust_contact = 'Jim Jones');
联结查询：
SELECT c1.cust_id, c1.cust_name, c1.cust_contact 
FROM customers AS c1,customers AS c2
WHERE c1.cust_name = c2.cust_name AND c1.cust_contact = 'Jim Jones';
34、所有顾客及其订单
SELECT customers.cust_id,orders.order_num FROM customers,orders
WHERE customers.cust_id = orders.cust_id;//没有订单的顾客不显示
SELECT customers.cust_id,orders.order_num FROM customers LEFT JOIN orders
ON customers.cust_id = orders.cust_id;//包括没有订单顾客在内的所有顾客
35、检索所有顾客及每个顾客所下的订单数
SELECT cust_id,COUNT(*) FROM orders GROUP BY cust_id;
SELECT customers.cust_id,COUNT(orders.order_num) AS num FROM customers LEFT JOIN orders
ON customers.cust_id = orders.cust_id GROUP BY customers.cust_id;
36、组合查询
需要Illinois、Indiana和Michigan等美国几个州的所有顾客的报表，还想包括不管位于哪个州的所有的Fun4All
SELECT cust_name,cust_contact,cust_email FROM customers WHERE cust_state IN('IL','IN','MI');
SELECT cust_name,cust_contact,cust_email FROM customers WHERE cust_name = 'Fun4All';
组合查询-中间加UNION
SELECT cust_name,cust_contact,cust_email FROM customers WHERE cust_state IN('IL','IN','MI')
《UNION》-每个查询必须包含相同的列、表达式或者聚合函数
SELECT cust_name,cust_contact,cust_email FROM customers WHERE cust_name = 'Fun4All';
《OR》
SELECT cust_name,cust_contact,cust_email FROM customers WHERE cust_state IN('IL','IN','MI')
OR cust_name = 'Fun4All';












